// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapper.proto

#ifndef PROTOBUF_wrapper_2eproto__INCLUDED
#define PROTOBUF_wrapper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
// ToDo: Requires protoc plugin to auto generate next line
#include "../../Framework/InternalMessage.h"

namespace Exchange {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wrapper_2eproto();
void protobuf_AssignDesc_wrapper_2eproto();
void protobuf_ShutdownFile_wrapper_2eproto();

class Wrapper;

// ===================================================================

// ToDo: Requires protoc plugin to modify %super_class% defnition
class Wrapper : public InternalMessage, public std::enable_shared_from_this<Wrapper> {
 public:
  Wrapper();
  virtual ~Wrapper();

  Wrapper(const Wrapper& from);

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrapper& default_instance();

  void Swap(Wrapper* other);

  // implements Message ----------------------------------------------

  Wrapper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wrapper& from);
  void MergeFrom(const Wrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string MessageId = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // required bytes Payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // required uint32 PayloadSize = 3;
  inline bool has_payloadsize() const;
  inline void clear_payloadsize();
  static const int kPayloadSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 payloadsize() const;
  inline void set_payloadsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Exchange.Wrapper)
  // implements IMessage ----------------------------------------------
  // ToDo: Requires protoc plugin to auto generate next method
  inline bool CallHandler(const HandlerPtr& handler)
  {
    return CallHandlerTemplate(handler, shared_from_this());
  }

private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_payloadsize();
  inline void clear_has_payloadsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* messageid_;
  ::std::string* payload_;
  ::google::protobuf::uint32 payloadsize_;
  friend void  protobuf_AddDesc_wrapper_2eproto();
  friend void protobuf_AssignDesc_wrapper_2eproto();
  friend void protobuf_ShutdownFile_wrapper_2eproto();

  void InitAsDefaultInstance();
  static Wrapper* default_instance_;
};
// ===================================================================


// ===================================================================

// Wrapper

// required string MessageId = 1;
inline bool Wrapper::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wrapper::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wrapper::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wrapper::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& Wrapper::messageid() const {
  // @@protoc_insertion_point(field_get:Exchange.Wrapper.MessageId)
  return *messageid_;
}
inline void Wrapper::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:Exchange.Wrapper.MessageId)
}
inline void Wrapper::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Exchange.Wrapper.MessageId)
}
inline void Wrapper::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Exchange.Wrapper.MessageId)
}
inline ::std::string* Wrapper::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Exchange.Wrapper.MessageId)
  return messageid_;
}
inline ::std::string* Wrapper::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrapper::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Exchange.Wrapper.MessageId)
}

// required bytes Payload = 2;
inline bool Wrapper::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wrapper::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wrapper::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wrapper::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Wrapper::payload() const {
  // @@protoc_insertion_point(field_get:Exchange.Wrapper.Payload)
  return *payload_;
}
inline void Wrapper::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:Exchange.Wrapper.Payload)
}
inline void Wrapper::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:Exchange.Wrapper.Payload)
}
inline void Wrapper::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Exchange.Wrapper.Payload)
}
inline ::std::string* Wrapper::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Exchange.Wrapper.Payload)
  return payload_;
}
inline ::std::string* Wrapper::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wrapper::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Exchange.Wrapper.Payload)
}

// required uint32 PayloadSize = 3;
inline bool Wrapper::has_payloadsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wrapper::set_has_payloadsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wrapper::clear_has_payloadsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wrapper::clear_payloadsize() {
  payloadsize_ = 0u;
  clear_has_payloadsize();
}
inline ::google::protobuf::uint32 Wrapper::payloadsize() const {
  // @@protoc_insertion_point(field_get:Exchange.Wrapper.PayloadSize)
  return payloadsize_;
}
inline void Wrapper::set_payloadsize(::google::protobuf::uint32 value) {
  set_has_payloadsize();
  payloadsize_ = value;
  // @@protoc_insertion_point(field_set:Exchange.Wrapper.PayloadSize)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Exchange

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wrapper_2eproto__INCLUDED
