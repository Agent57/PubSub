// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestMessage.proto

#ifndef PROTOBUF_TestMessage_2eproto__INCLUDED
#define PROTOBUF_TestMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
// ToDo: Requires protoc plugin to auto generate next line
#include "../../Framework/InternalMessage.h"

namespace Exchange {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestMessage_2eproto();
void protobuf_AssignDesc_TestMessage_2eproto();
void protobuf_ShutdownFile_TestMessage_2eproto();

class TestMessage;

// ===================================================================

// ToDo: Requires protoc plugin to modify %super_class% defnition
class TestMessage : public InternalMessage, public std::enable_shared_from_this<TestMessage> {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  TestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional string Text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional float Float = 3;
  inline bool has_float_() const;
  inline void clear_float_();
  static const int kFloatFieldNumber = 3;
  inline float float_() const;
  inline void set_float_(float value);

  // optional bytes ByteArray = 4;
  inline bool has_bytearray() const;
  inline void clear_bytearray();
  static const int kByteArrayFieldNumber = 4;
  inline const ::std::string& bytearray() const;
  inline void set_bytearray(const ::std::string& value);
  inline void set_bytearray(const char* value);
  inline void set_bytearray(const void* value, size_t size);
  inline ::std::string* mutable_bytearray();
  inline ::std::string* release_bytearray();
  inline void set_allocated_bytearray(::std::string* bytearray);

  // @@protoc_insertion_point(class_scope:Exchange.TestMessage)
  // implements IMessage ----------------------------------------------
  // ToDo: Requires protoc plugin to auto generate next method
  inline bool CallHandler(const HandlerPtr& handler)
  {
    return CallHandlerTemplate(handler, shared_from_this());
  }

private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_float_();
  inline void clear_has_float_();
  inline void set_has_bytearray();
  inline void clear_has_bytearray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::google::protobuf::int32 number_;
  float float__;
  ::std::string* bytearray_;
  friend void  protobuf_AddDesc_TestMessage_2eproto();
  friend void protobuf_AssignDesc_TestMessage_2eproto();
  friend void protobuf_ShutdownFile_TestMessage_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TestMessage

// optional int32 Number = 1;
inline bool TestMessage::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 TestMessage::number() const {
  // @@protoc_insertion_point(field_get:Exchange.TestMessage.Number)
  return number_;
}
inline void TestMessage::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:Exchange.TestMessage.Number)
}

// optional string Text = 2;
inline bool TestMessage::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessage::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& TestMessage::text() const {
  // @@protoc_insertion_point(field_get:Exchange.TestMessage.Text)
  return *text_;
}
inline void TestMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Exchange.TestMessage.Text)
}
inline void TestMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Exchange.TestMessage.Text)
}
inline void TestMessage::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Exchange.TestMessage.Text)
}
inline ::std::string* TestMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Exchange.TestMessage.Text)
  return text_;
}
inline ::std::string* TestMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Exchange.TestMessage.Text)
}

// optional float Float = 3;
inline bool TestMessage::has_float_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestMessage::set_has_float_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestMessage::clear_has_float_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestMessage::clear_float_() {
  float__ = 0;
  clear_has_float_();
}
inline float TestMessage::float_() const {
  // @@protoc_insertion_point(field_get:Exchange.TestMessage.Float)
  return float__;
}
inline void TestMessage::set_float_(float value) {
  set_has_float_();
  float__ = value;
  // @@protoc_insertion_point(field_set:Exchange.TestMessage.Float)
}

// optional bytes ByteArray = 4;
inline bool TestMessage::has_bytearray() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestMessage::set_has_bytearray() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestMessage::clear_has_bytearray() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestMessage::clear_bytearray() {
  if (bytearray_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytearray_->clear();
  }
  clear_has_bytearray();
}
inline const ::std::string& TestMessage::bytearray() const {
  // @@protoc_insertion_point(field_get:Exchange.TestMessage.ByteArray)
  return *bytearray_;
}
inline void TestMessage::set_bytearray(const ::std::string& value) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(value);
  // @@protoc_insertion_point(field_set:Exchange.TestMessage.ByteArray)
}
inline void TestMessage::set_bytearray(const char* value) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(value);
  // @@protoc_insertion_point(field_set_char:Exchange.TestMessage.ByteArray)
}
inline void TestMessage::set_bytearray(const void* value, size_t size) {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytearray_ = new ::std::string;
  }
  bytearray_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Exchange.TestMessage.ByteArray)
}
inline ::std::string* TestMessage::mutable_bytearray() {
  set_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytearray_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Exchange.TestMessage.ByteArray)
  return bytearray_;
}
inline ::std::string* TestMessage::release_bytearray() {
  clear_has_bytearray();
  if (bytearray_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bytearray_;
    bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestMessage::set_allocated_bytearray(::std::string* bytearray) {
  if (bytearray_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytearray_;
  }
  if (bytearray) {
    set_has_bytearray();
    bytearray_ = bytearray;
  } else {
    clear_has_bytearray();
    bytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Exchange.TestMessage.ByteArray)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Exchange

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestMessage_2eproto__INCLUDED
